/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// node_modules/ncp/lib/ncp.js
var require_ncp = __commonJS({
  "node_modules/ncp/lib/ncp.js"(exports, module2) {
    var fs5 = require("fs");
    var path26 = require("path");
    module2.exports = ncp3;
    ncp3.ncp = ncp3;
    function ncp3(source, dest, options, callback) {
      var cback = callback;
      if (!callback) {
        cback = options;
        options = {};
      }
      var basePath = process.cwd(), currentPath = path26.resolve(basePath, source), targetPath = path26.resolve(basePath, dest), filter = options.filter, rename2 = options.rename, transform = options.transform, clobber = options.clobber !== false, modified = options.modified, dereference = options.dereference, errs = null, started = 0, finished = 0, running = 0, limit = options.limit || ncp3.limit || 16;
      limit = limit < 1 ? 1 : limit > 512 ? 512 : limit;
      startCopy(currentPath);
      function startCopy(source2) {
        started++;
        if (filter) {
          if (filter instanceof RegExp) {
            if (!filter.test(source2)) {
              return cb(true);
            }
          } else if (typeof filter === "function") {
            if (!filter(source2)) {
              return cb(true);
            }
          }
        }
        return getStats(source2);
      }
      function getStats(source2) {
        var stat2 = dereference ? fs5.stat : fs5.lstat;
        if (running >= limit) {
          return setImmediate(function() {
            getStats(source2);
          });
        }
        running++;
        stat2(source2, function(err, stats) {
          var item = {};
          if (err) {
            return onError(err);
          }
          item.name = source2;
          item.mode = stats.mode;
          item.mtime = stats.mtime;
          item.atime = stats.atime;
          if (stats.isDirectory()) {
            return onDir(item);
          } else if (stats.isFile()) {
            return onFile(item);
          } else if (stats.isSymbolicLink()) {
            return onLink(source2);
          }
        });
      }
      function onFile(file) {
        var target = file.name.replace(currentPath, targetPath);
        if (rename2) {
          target = rename2(target);
        }
        isWritable(target, function(writable) {
          if (writable) {
            return copyFile2(file, target);
          }
          if (clobber) {
            rmFile(target, function() {
              copyFile2(file, target);
            });
          }
          if (modified) {
            var stat2 = dereference ? fs5.stat : fs5.lstat;
            stat2(target, function(err, stats) {
              if (file.mtime.getTime() > stats.mtime.getTime())
                copyFile2(file, target);
              else
                return cb();
            });
          } else {
            return cb();
          }
        });
      }
      function copyFile2(file, target) {
        var readStream = fs5.createReadStream(file.name), writeStream = fs5.createWriteStream(target, { mode: file.mode });
        readStream.on("error", onError);
        writeStream.on("error", onError);
        if (transform) {
          transform(readStream, writeStream, file);
        } else {
          writeStream.on("open", function() {
            readStream.pipe(writeStream);
          });
        }
        writeStream.once("finish", function() {
          if (modified) {
            fs5.utimesSync(target, file.atime, file.mtime);
            cb();
          } else
            cb();
        });
      }
      function rmFile(file, done) {
        fs5.unlink(file, function(err) {
          if (err) {
            return onError(err);
          }
          return done();
        });
      }
      function onDir(dir) {
        var target = dir.name.replace(currentPath, targetPath);
        isWritable(target, function(writable) {
          if (writable) {
            return mkDir(dir, target);
          }
          copyDir(dir.name);
        });
      }
      function mkDir(dir, target) {
        fs5.mkdir(target, dir.mode, function(err) {
          if (err) {
            return onError(err);
          }
          copyDir(dir.name);
        });
      }
      function copyDir(dir) {
        fs5.readdir(dir, function(err, items) {
          if (err) {
            return onError(err);
          }
          items.forEach(function(item) {
            startCopy(path26.join(dir, item));
          });
          return cb();
        });
      }
      function onLink(link) {
        var target = link.replace(currentPath, targetPath);
        fs5.readlink(link, function(err, resolvedPath) {
          if (err) {
            return onError(err);
          }
          checkLink(resolvedPath, target);
        });
      }
      function checkLink(resolvedPath, target) {
        if (dereference) {
          resolvedPath = path26.resolve(basePath, resolvedPath);
        }
        isWritable(target, function(writable) {
          if (writable) {
            return makeLink(resolvedPath, target);
          }
          fs5.readlink(target, function(err, targetDest) {
            if (err) {
              return onError(err);
            }
            if (dereference) {
              targetDest = path26.resolve(basePath, targetDest);
            }
            if (targetDest === resolvedPath) {
              return cb();
            }
            return rmFile(target, function() {
              makeLink(resolvedPath, target);
            });
          });
        });
      }
      function makeLink(linkPath, target) {
        fs5.symlink(linkPath, target, function(err) {
          if (err) {
            return onError(err);
          }
          return cb();
        });
      }
      function isWritable(path27, done) {
        fs5.lstat(path27, function(err) {
          if (err) {
            if (err.code === "ENOENT")
              return done(true);
            return done(false);
          }
          return done(false);
        });
      }
      function onError(err) {
        if (options.stopOnError) {
          return cback(err);
        } else if (!errs && options.errs) {
          errs = fs5.createWriteStream(options.errs);
        } else if (!errs) {
          errs = [];
        }
        if (typeof errs.write === "undefined") {
          errs.push(err);
        } else {
          errs.write(err.stack + "\n\n");
        }
        return cb();
      }
      function cb(skipped) {
        if (!skipped)
          running--;
        finished++;
        if (started === finished && running === 0) {
          if (cback !== void 0) {
            return errs ? cback(errs) : cback(null);
          }
        }
      }
    }
  }
});

// node_modules/pull-stream/pull.js
var require_pull = __commonJS({
  "node_modules/pull-stream/pull.js"(exports, module2) {
    "use strict";
    module2.exports = function pull(a) {
      var length = arguments.length;
      if (typeof a === "function" && a.length === 1) {
        var args = new Array(length);
        for (var i = 0; i < length; i++)
          args[i] = arguments[i];
        return function(read3) {
          if (args == null) {
            throw new TypeError("partial sink should only be called once!");
          }
          var ref = args;
          args = null;
          switch (length) {
            case 1:
              return pull(read3, ref[0]);
            case 2:
              return pull(read3, ref[0], ref[1]);
            case 3:
              return pull(read3, ref[0], ref[1], ref[2]);
            case 4:
              return pull(read3, ref[0], ref[1], ref[2], ref[3]);
            default:
              ref.unshift(read3);
              return pull.apply(null, ref);
          }
        };
      }
      var read2 = a;
      if (read2 && typeof read2.source === "function") {
        read2 = read2.source;
      }
      for (var i = 1; i < length; i++) {
        var s = arguments[i];
        if (typeof s === "function") {
          read2 = s(read2);
        } else if (s && typeof s === "object") {
          s.sink(read2);
          read2 = s.source;
        }
      }
      return read2;
    };
  }
});

// node_modules/looper/index.js
var require_looper = __commonJS({
  "node_modules/looper/index.js"(exports, module2) {
    var looper = module2.exports = function(fun) {
      (function next() {
        var loop = true, returned = false, sync = false;
        do {
          sync = true;
          loop = false;
          fun.call(this, function() {
            if (sync)
              loop = true;
            else
              next();
          });
          sync = false;
        } while (loop);
      })();
    };
  }
});

// node_modules/stream-to-pull-stream/index.js
var require_stream_to_pull_stream = __commonJS({
  "node_modules/stream-to-pull-stream/index.js"(exports, module2) {
    var pull = require_pull();
    var looper = require_looper();
    function destroy(stream) {
      if (!stream.destroy)
        console.error("warning, stream-to-pull-stream: \nthe wrapped node-stream does not implement `destroy`, \nthis may cause resource leaks.");
      else
        stream.destroy();
    }
    function write(read4, stream, cb) {
      var ended, closed = false, did;
      function done() {
        if (did)
          return;
        did = true;
        cb && cb(ended === true ? null : ended);
      }
      function onClose() {
        if (closed)
          return;
        closed = true;
        cleanup();
        if (!ended)
          read4(ended = true, done);
        else
          done();
      }
      function onError(err) {
        cleanup();
        if (!ended)
          read4(ended = err, done);
      }
      function cleanup() {
        stream.on("finish", onClose);
        stream.removeListener("close", onClose);
        stream.removeListener("error", onError);
      }
      stream.on("close", onClose);
      stream.on("finish", onClose);
      stream.on("error", onError);
      process.nextTick(function() {
        looper(function(next) {
          read4(null, function(end, data) {
            ended = ended || end;
            if (end === true)
              return stream._isStdio ? done() : stream.end();
            if (ended = ended || end) {
              destroy(stream);
              return done(ended);
            }
            if (stream._isStdio)
              stream.write(data, function() {
                next();
              });
            else {
              var pause = stream.write(data);
              if (pause === false)
                stream.once("drain", next);
              else
                next();
            }
          });
        });
      });
    }
    function read2(stream) {
      var ended = false, waiting = false;
      var _cb;
      function read4() {
        var data = stream.read();
        if (data !== null && _cb) {
          var cb = _cb;
          _cb = null;
          cb(null, data);
        }
      }
      stream.on("readable", function() {
        waiting = true;
        _cb && read4();
      }).on("end", function() {
        ended = true;
        _cb && _cb(ended);
      }).on("error", function(err) {
        ended = err;
        _cb && _cb(ended);
      });
      return function(end, cb) {
        _cb = cb;
        if (ended)
          cb(ended);
        else if (waiting)
          read4();
      };
    }
    function read1(stream) {
      var buffer = [], cbs = [], ended, paused = false;
      var draining;
      function drain() {
        while ((buffer.length || ended) && cbs.length)
          cbs.shift()(buffer.length ? null : ended, buffer.shift());
        if (!buffer.length && paused) {
          paused = false;
          stream.resume();
        }
      }
      stream.on("data", function(data) {
        buffer.push(data);
        drain();
        if (buffer.length && stream.pause) {
          paused = true;
          stream.pause();
        }
      });
      stream.on("end", function() {
        ended = true;
        drain();
      });
      stream.on("close", function() {
        ended = true;
        drain();
      });
      stream.on("error", function(err) {
        ended = err;
        drain();
      });
      return function(abort, cb) {
        if (!cb)
          throw new Error("*must* provide cb");
        if (abort) {
          let onAbort2 = function() {
            while (cbs.length)
              cbs.shift()(abort);
            cb(abort);
          };
          var onAbort = onAbort2;
          if (ended)
            return onAbort2();
          stream.once("close", onAbort2);
          destroy(stream);
        } else {
          cbs.push(cb);
          drain();
        }
      };
    }
    var read3 = read1;
    var sink = function(stream, cb) {
      return function(read4) {
        return write(read4, stream, cb);
      };
    };
    var source = function(stream) {
      return read1(stream);
    };
    exports = module2.exports = function(stream, cb) {
      return stream.writable && stream.write ? stream.readable ? function(_read) {
        write(_read, stream, cb);
        return read1(stream);
      } : sink(stream, cb) : source(stream);
    };
    exports.sink = sink;
    exports.source = source;
    exports.read = read3;
    exports.read1 = read1;
    exports.read2 = read2;
    exports.duplex = function(stream, cb) {
      return {
        source: source(stream),
        sink: sink(stream, cb)
      };
    };
    exports.transform = function(stream) {
      return function(read4) {
        var _source = source(stream);
        sink(stream)(read4);
        return _source;
      };
    };
  }
});

// node_modules/shell-quote/index.js
var require_shell_quote = __commonJS({
  "node_modules/shell-quote